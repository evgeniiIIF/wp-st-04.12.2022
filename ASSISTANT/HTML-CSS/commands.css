___________________________Подсказки__________________________
Текст в одну строку

.to_one_str {
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;
}

----------------------------------------------------------------
first-letter работает только с блочными эллементами

.menu-label {
    display: block;
    font-weight: 400;
    font-size: 14px;

    &::first-letter {
      text-transform: uppercase;
    }
  }
----------------------------------------------------------------
vertical-align
Оно применяется только к строчным элементам inline или строчным блокам inline-block.
Оно влияет на выравнивание самого элемента, а не его содержимого (кроме случаев, когда применяется к ячейкам таблицы).
Когда оно применяется к ячейке таблицы, выравнивание влияет на содержимое ячейки, а не на неё саму.
Что нужно сделать, чтобы центрировать по высоте элемент1 внутри элемента2:
Оба элемента должны быть любыми inline элементами
У элемента2 должен быть указан font-size или line-height. Элемент2 отцентрируется только в зависимости от font-size или line-height и не обратит внимания на height.
----------------------------------------------------------------
Генератор стрелок CSS
http://apps.eky.hk/css-triangle-generator/
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

__________________________________________Подключение шрифтов______________________________________________
https://www.youtube.com/watch?v=GwA0BN5RgB0&list=PLM6XATa8CAG4F9nAIYNS5oAiPotxwLFIr&index=14

Google Fonts:
https://fonts.google.com/

Подключение с Google Fonts

1. Идем на Google fonts и ищем нужные шрифты и выбе	раем вариации (regular, bold и тд) для русского нужно выбрать кирилический.
2. Для CSS заходим в <link> копируем и вставляем в HEAD в наш HTML перед подключением нашего CSS файла.
3. Для SCSS заходим в @import копируем то что между тегами <style> и вставляем в SCSS в самый верх.
4. Для установки шривта элементу копируем свойство и устанавливаем его элементу - font-family: 'PT Sans', sans-serif; 

========================================================================
Каталог шрифтов:
https://nomail.com.ua/

Конвертер шрифтов:
http://www.font2web.com/

Если на гугл фонтс нет нужного шрифта:

1. Идем на nomail.com.ua и скачиваем нужные шрифты
2. Идем на конвертер шрифтов - конвертируем, скачиваем ZIP
3. Открываем ZIP, из папки fonts разорхивируем все файлы в папку fonts нашего проекта
4. Из каждого ZIP отктываем fonts.css через редактор и копируем код в наш SCSS

@font-face { /* Подключает файлы шрифта */

	font-family: 'Имя шрифта'; /*семейство шрифта*/

	src: url("../fonts/файл шрифта.eot"); 
	src: local("O"), url("../fonts/файл шрифта.woff") format("woff"), 
			url("../fonts/файл шрифта.ttf") format("truetype"), /*Подключение шрифта разного формата*/
			url("../fonts/файл шрифта.svg") format("svg");
	font-weight: normal;
	font-style: normal;
}

Итак что делаем с этим кодом

1. Можно изменить имя шривта на нормальное а не длинное - для нескольких вариаций одно ито же имя!
2. Если шрифт regular(по умолчанию) то font-weight и font-style оставляем normal.
3. Если шрифт например italic то меняем соответствующие значения
	font-weight: 500;
	font-style: italic;
4. Возможно нужно изменить пути к файлам шрифтов. Ctrl + H (найти и заменить)
5. Подключаем к эллементу font-family: "Имя шрифта" и устанавливаем font-weight, font-style итд.

========================================================================
font-family: "Имя шрифта", "Имя шрифта", тип шрифта
Устанавливает семейство шрифта
Типы шрифта:
serif — шрифты с засечками (антиквенные), типа Times;
sans-serif — рубленные шрифты (шрифты без засечек или гротески), типичный представитель — Arial;
cursive — курсивные шрифты;
fantasy — декоративные шрифты;
monospace — моноширинные шрифты, ширина каждого символа в таком семействе одинакова (шрифт Courier).
========================================================================

_________________________________________Свойства шрифта______________________________________________

font-family: Helvetica, "Helvetica Neue"-название шрифта , sans-serif-тип шрифта ;
Устанавливает семейство шрифта(тип шрифта)
Типы шрифта:
serif — шрифты с засечками (антиквенные), типа Times;
sans-serif — рубленные шрифты (шрифты без засечек или гротески), типичный представитель — Arial;
cursive — курсивные шрифты;
fantasy — декоративные шрифты;
monospace — моноширинные шрифты, ширина каждого символа в таком семействе одинакова (шрифт Courier).

font-size: 14px;
Определяет размер шрифта элемента.

font-style: italic;
Определяет начертание шрифта — обычное, курсивное или наклонное.
normal - Обычное начертание текста.
italic - Курсивное начертание. 
oblique - Наклонное начертание. Курсив и наклонный шрифт при всей их похожести не одно и то же. 
Курсив это специальный шрифт имитирующий рукописный, наклонный же образуется путем наклона обычных знаков вправо. 

font-weight: 700;
Устанавливает насыщенность (толщину) шрифта.
100 - thin
200 - Extra-light
300 - Light 
400 - normal - Regular - по умолчанию
500 - medium
600 - semibold
700 - bold
800 - Extra-bold
900 - black


Свойства текста

color
Определяет цвет текста. Для задания цветов обычно используются числа в шестнадцатеричном коде, 
либо с помощью RGB.

text-align: center;
Определяет горизонтальное выравнивание текста в пределах элемента. 
center - Выравнивание текста по центру.
justify - Выравнивание по ширине, что означает одновременное выравнивание по левому и правому краю. 
          Чтобы произвести это действие браузер в этом случае добавляет пробелы между словами.
          Необходимо достаточно много текста чтобы заполнить строки. От левого края до правого.
left - Выравнивание текста по левому краю. 
right - Выравнивание текста по правому краю.

text-decoration
Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания. 
Одновременно можно применить более одного стиля, перечисляя значения через пробел. 
Это свойство наследуется и может принимать значения:

line-through - Создает перечеркнутый текст.
overline - Линия проходит над текстом.
underline - Устанавливает подчеркнутый текст. 
none - Отменяет все эффекты, в том числе и подчеркивания у ссылок, которое задано по умолчанию.

text-shadow: Горизонтальное_смещение Вертикальное_смещение Размер Цвет;
Добавляет тень к тексту.
Прмер text-shadow: 1px 1px 1px #000;

text-transform
Управляет преобразованием текста в заглавные или прописные символы.
capitalize  - Первый символ каждого слова в предложении будет заглавным. Остальные символы свой вид не меняют.
lowercase - Все символы текста становятся строчными (нижний регистр). 
uppercase - Все символы текста становятся прописными (верхний регистр).
none - Не меняет регистр символов.

text-indent: 50px;
Устанавливает величину отступа первой строки блока текста. При меняется, если нам нужно создать что-то типа красной строки.

letter-spacing: 5px;
Определяет интервал между символами (буквами). Используется когда нужно разрядить текст.

word-spacing: 5px;
Устанавливает интервал между словами.

line-height
Устанавливает межстрочный интервал текста. Широко применяется при верстке текста.

white-space
Управляет свойствами пробелов между словами. Пименяется в основном со значением 
nowrap которое запрещает перенос строки. Таким образом весь текст отображается в одну строку и не ломается. 
Значение normal вернет все как было.



___________________________________________Поля границы и отступы______________________________________________

box-sizing
Применяется для изменения алгоритма расчета ширины и высоты элемента. 
Свойство наследуется.

content-box - Основывается на стандартах CSS, при этом свойства width и height задают ширину и высоту контента и не включают
              в себя значения отступов, полей и границ.

border-box - Свойства width и height включают в себя значения полей и границ, но не отступов (margin). 
             Эта модель используется браузером Internet Exporer в режиме несовместимости.

padding-box - Свойства width и height включают в себя значения полей, но не отступов (margin) и границ (border). 
=========================================
padding
Внутренний отступ элемента
При указании поля в процентах, значение считается от ширины родителя элемента.
Свойство не наследуется.

padding: 10px; со_всех_сторон;
padding: 10px 10px; сверху+снизу справа+слева;
padding: 10px 10px 10px; сверху справа+слева cнизу;
padding: 10px 10px 10px 10px; сверху справа снизу слева;

Отступ сверху и снизу не действует на срочные теги
=========================================
margin
Внешний отступ элемента
При указании поля в процентах, значение считается от ширины родителя элемента.
Свойство не наследуется.
Значение может быть как положительным, так и отрицательным числом.

margin: 10px; со_всех_сторон;
margin: 10px 10px; сверху+снизу справа+слева;
margin: 10px 10px 10px; сверху справа+слева cнизу;
margin: 10px 10px 10px 10px; сверху справа снизу слева;

Отступ сверху и снизу не действует на срочные теги
=========================================
width
Устанавливает ширину блочных тегов и некоторыйх строчных (например img)
Свойство не наследуется.
width:100px;
width:10%;
=========================================
max-width
Устанавливает максимальную ширину блочных тегов и некоторыйх строчных (например img)
=========================================
min-width
Устанавливает минимальную ширину блочных тегов и некоторыйх строчных (например img)
=========================================
height:
Устанавливает высоту блочных тегов и некоторыйх строчных (например img)
Свойство не наследуется.
height:100px;
height:10%;
=========================================
min-height
Свойство не наследуется.
=========================================
max-height
Свойство не наследуется.
=========================================
overflow 
Управляет отображением содержания блочного элемента
visible - Отображается все содержание элемента, даже за пределами установленной высоты и ширины. 
hidden - Отображается только область внутри элемента, остальное будет скрыто.
scroll - Всегда добавляются полосы прокрутки.
auto - Полосы прокрутки добавляются только при необходимости.
=========================================
display:
Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе.
Свойство не наследуется.

block - Элемент показывается как блочный. Применение этого значения для встроенных элементов, например тега <span>, 
        заставляет его вести подобно блокам — происходит перенос строк в начале и в конце содержимого. 					

inline - Элемент отображается как встроенный. Использование блочных тегов, таких как <div> и <p>, автоматически создает 
         перенос и показывает содержимое этих тегов с новой строки. Значение inline отменяет эту особенность, 
         поэтому содержимое блочных элементов начинается с того места, где окончился предыдущий элемент. 

inline - block - Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно 
                 встроенному элементу. Фактически такой элемент по своему действию похож на встраиваемые элементы 
                 (вроде тега <img>). При этом его внутренняя часть форматируется как блочный элемент, а сам элемент — как встроенный. 	

none - Временно удаляет элемент из документа. Занимаемое им место не резервируется и 
       веб-страница формируется так, словно элемента и не было. 
=========================================

____________________________Свойства и стили оформления блоков. CSS opacity_________________________

=========================================
border
Универсальное свойство border позволяет одновременно установить толщину, 
стиль и цвет границы вокруг элемента.
border: 1px solid #000; (размер стиль цвет)
Основные стили -solid dotted dashed
=========================================
border-radius
Устанавливает радиус скругления уголков блока.
border-radius:50%; - кргуг
Можно использовать вместе с overflow: hidden;
=========================================
outline
Универсальное свойство, одновременно устанавливающее цвет, 
стиль и толщину внешней границы на всех четырех сторонах элемента. 
В отличие от линии, задаваемой через border, свойство outline 
не влияет на положение блока и его ширину. 
Также нельзя задать параметры линии на отдельных сторонах элемента, 
outline применяется сразу ко всем четырём сторонам. 
=========================================
box-shadow
Добавляет тень к элементу.
box-shadow: сдвиг_по_гориз сдвиг_по_верт радиус расстояние
Можно добавить много теней. На тень влияет свойство border-radius.
=========================================
opacity
Определяет уровень прозрачности элемента.
Отличие opacity:0; от display:none; в том что блок не убирается из верстки а только становиться прозрачным, 
то есть занимаемое им место остается. Так же, с прозрачными элементами все еще можно взаимодействовать, например кликать по ссылкам.
=========================================
visibility
Предназначен для отображения или скрытия элемента.
Отличие visibility: hidden; от display:none; в том что блок не убирается из верстки а только скрывается, то есть занимаемое им место остается.
Отличие visibility: hidden; от opacity:0; в том что блок скрывается и взаимодействовать с ним нельзя.
=========================================

_______________________________________________BACKGROUND______________________________________________
https://fls.guru/cssbackground.html - cсылка на методичку.

Универсальная запись (URL -  posX posY/sizeX sizeY - repeat - attachment)

background: url('img/background/avatar.jpg') 25px 30px/100% auto no-repeat fixed;


background:
Универсальное свойство background позволяет установить одновременно несколько характеристик фона а именно:
=======================================================
background-color - Определяет цвет фона элемента.
=======================================================
background-image - Устанавливает фоновое изображение для элемента.

Так же значением свойства можно указать градиент:
линейный:
background:linear-gradient(to top, #fefcea, #f1da36); 
радиальный:
background:radial-gradient(ellipse at center, rgba(30,87,153,1) 0%,rgba(41,137,216,1) 50%,
                                              rgba(32,124,202,1) 51%,rgba(125,185,232,1) 100%);

rgba - (red green blue + альфаканал) - альфаканал позволяет управлять прозрачностью фона 
0,1 прозрачный 0,5 полупрозрачный, 0,8 почти непрозрачный
http://hex2rgba.devoth.com/ - ссылка на кодировщик цвета

Подробнее о градиентах:
http://htmlbook.ru/css3-na-primerakh/lineinyi-gradient

Инструмент создания готового кода:
https://www.colorzilla.com/gradient-editor/
=======================================================
background-position - Задает начальное положение фонового изображения, установленного с помощью свойства background-image.
=======================================================
background-repeat - Определяет, как будет повторяться фоновое изображение, установленное с помощью свойства background-image.
no-repeat -  Устанавливает одно фоновое изображение в элементе без его повторений, положение которого определяется 
	     свойством background-position (по умолчанию в левом верхнем углу). Аналогично no-repeat no-repeat.
repeat - Фоновое изображение повторяется по горизонтали и вертикали. Аналогично repeat repeat.
repeat-x - Фоновый рисунок повторяется только по горизонтали. Аналогично repeat no-repeat.
repeat-y - Фоновый рисунок повторяется только по вертикали. Аналогично no-repeat repeat.
inherit -Наследует значение родителя.
space - Изображение повторяется столько раз, чтобы полностью заполнить область; если это не удаётся, между картинками добавляется пустое пространство.
round - Изображение повторяется так, чтобы в области поместилось целое число рисунков; если это не удаётся сделать, то фоновые рисунки масштабируются.
=======================================================
background-attachment - Устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента.
fixed - Делает фоновое изображение элемента неподвижным. 
scroll - Позволяет перемещаться фону вместе с содержимым.
inherit - Наследует значение родителя.
local - Фон фиксируется с учётом поведения элемента. Если элемент имеет прокрутку, то фон будет прокручиваться вместе с содержимым, но фон выходящий за рамки элемента остаётся на месте.
=======================================================
background-size  - Масштабирует фоновое изображение согласно заданным размерам.
<значение> - Задает размер в любых доступных для CSS единицах. 
<проценты> - Задает размер фоновой картинки в процентах от ширины или высоты элемента. 
auto - Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными; если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.
cover - Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.
contain - Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока. 
Если установлено одно значение, оно задает ширину фона, второе значение принимается за auto. Пропорции картинки при этом сохраняются. Использование двух значений через пробел задает ширину и высоту фоновой картинки.
=======================================================
Свойство background позволяет задать несколько изображений через запятую, 
причем со своими настройками позиционарования маштабирования и прокрутки
=======================================================
___________________________________________Responsive pictures_________________________________________

Для работы с изображениями через img в HTML не через background.

Свойство object-fit

Свойство object-fit определяет, 
каким образом содержимое замещаемых элементов будет подогнано к краям контейнера 
тега в случае, когда для элемента заданы ширина и высота, отличные от его собственных размеров. 

fill
Значение по умолчанию. Содержимое замещаемого элемента полностью 
заполняет область контейнера тега, используя его высоту и ширину.

contain
Содержимое элемента масштабируется, выравниваясь по центру с сохранением 
пропорций таким образом, чтобы полностью поместиться внутри контейнера.

cover
Содержимое элемента обрезается, выравниваясь по центру с сохранением 
пропорций таким образом, чтобы полностью заполнить область контейнера.

scale-down
Содержимое элемента выбирает из двух значений none и contain то значение, которое даёт меньшие размеры.

none
Замещаемое содержимое не изменяет свои собственные размеры, чтобы поместиться и заполнить область контейнера.

initial
Устанавливает это свойство в значение по умолчанию.

inherit
Наследует значение свойства от родительского элемента.

============================================================================

Свойство object-position
Свойство object-position используется в сочетании с object-fit и задаёт положение содержимого 
замещаемого элемента внутри контейнера относительно координатных осей X и Y. Значение по умолчанию 50% 50%. 

============================================================================
Метод для IBG для Internet Explorer
https://fls.guru/ibg.html
--------
Справочник типов файлов 
https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_MIME-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
============================================================================
HTML-элемент <picture> служит контейнером для одного или более элементов <source> и одного элемента 
<img> для обеспечения оптимальной версии изображения для различных размеров экрана. 
Браузер рассмотрит каждый из дочерних элементов  <source> и выберет один, соответствующий лучшему совпадению; 
если совпадений среди элементов <source> найдено не будет, то будет выбран файл, указанный  атрибутом  src элемента <img> . 
Затем выбранное изображение отображается в пространстве, занятом элементом <img>. 

____________________________________________CSS псевдоклассы___________________________________________

Синтаксис, то есть правило записи псевдоклассов прост, мы пишем селектор класса либо селектор типа 
ставим двоеточие, пишем тот или иной псевдосласс и уже после этого открываем фигурные 
скобки и пишем нужные CSS параметры:
Селектор:Псевдокласс { параметры стиля }
================================================================================================================
Отлично, теперь рассмотрим псевдоклассы состояния.

:hover
Срабатывает при наведении на элемент, часто применяется применяется как для ссылок так и для любого другого элемента.

:active
Срабатывает при нажатии на элемент. В основном применяется к ссылкам и кнопкам.

:visited
Срабатывает для посещенных ссылок

:focus
Срабатывает при получении элементом фокуса. Часто применяется к елементам форм. Например инпутам.
================================================================================================================
Теперь рассмотрим псевдоклассы положения в коде.

:first-child
Обращение к первому элементу в блоке

:last-child
Обращение к последнему элементу в блоке

:nth-child(порядковый номер элемента)
Обращение к конкретным элементам в блоке


:nth-child(odd) - Обращается к элементам с нечётными номерами
:nth-child(even) - Обращается к элементам с чётными номерами
================================================================================================================

_____________________________________CSS псевдоэлементы_____________________________________

Псевдоэлементы – это селекторы, которые определяют область элементов, которая изначально 
отсутствует в дереве документа. Эта область создается искусственно с помощью CSS.

Псевдоэлемент :first-line задает стиль первой строки форматированного текста. 
Длина этой строки зависит от многих факторов, таких как используемый шрифт, 
размер окна браузера, ширина блока, языка и т.д. В правилах стиля допустимо 
использовать только свойства, относящиеся к шрифту, изменению цвета текста и фона.
=================================================================================
Псевдоэлемент :first-letter определяет стиль первого символа в тексте элемента, 
к которому добавляется. 
К этому псевдоэлементу могут применяться только стилевые свойства, 
связанные со свойствами шрифта, полями, отступами, границами, цветом и фоном.
=================================================================================
Псевдоэлемент :before применяется для отображения желаемого контента до содержимого элемента, 
к которому он добавляется. Работает совместно со свойством content. 

При добавлении :before к блочному элементу, значение свойства display может быть только:
 block, inline, none, list-item. 
Все остальные значения будут трактоваться как block.
При добавлении :before к встроенному элементу, display ограничен значениями inline и none. 
Все остальные будут восприниматься как inline.
=================================================================================
Псевдоэлемент, который используется для вывода желаемого текста после содержимого элемента, 
к которому он добавляется. Псевдоэлемент :after работает совместно со свойством content. 

При добавлении :after к блочному элементу, значение свойства display может быть только: 
block, inline, none, list-item. Все остальные значения будут трактоваться как block.
При добавлении :after к встроенному элементу, display ограничен значениями inline и none. 
Все остальные будут восприниматься как inline.
=================================================================================
::-ms-clear {}
Крестик для очистки инпута в браузерах IE
Задаёт стиль кнопки для очистки текстового поля. Исходно эта кнопка не видна, 
она появляется в правой части поля только при вводе текста.
Только IE
=================================================================================
::-moz-focus-inner{}
Задаёт стиль внутренней части элемента
Только FireFox
=================================================================================
Комбинирование псевдоэлементов
Обратится к ::before при ::hover и тд.
li::hover::before {...}
=================================================================================
« »


________________________________Позиционирование____________________________________________________

https://fls.guru/cssposition.html - ссылка на методичку

Свойство position
Устанавливает способ позиционирования элемента относительно окна браузера или других объектов 
на веб-странице. Вспомогательные свойства left, right, top и bottom управляют положением элемента, 
а z-index управляет наложением друг на друга по оси Z.

Значения:
static - элемент позиционируется относительно родителя и соседних элементов (по умолчанию)
relative - элемент позиционируется как static но можно двигать его относительно своего положения
absolute - элемент позиционируется относительно ближайшего родителя с relative, absolute, fixed и sticky
fixed - элемент позиционируется относительно окна браузера
sticky - элемент позиционируется как static но когда верхняя граница элемента будет 
находиться на расстоянии, указанном в параметре top, от верхней границы окна браузера (либо указанном в параметре bottom от нижней), 
он останется в этом положении относительно окна до тех пор пока его нижняя граница 
не упрется в другой sticky элемент или конец родительского элемента
inherit - берет значение от родителя
==========================================================
Свойства:
top, bottom, left и right - управляют положением элемента сверху снизу слева и справа.
Значения могут указываются в том числе в процентах и могут иметь отрицательные значения.
Работают с элементами к которым применен один из параметров 
position:relative,position:absolute,position:fixed и position:sticky (только top или bottom)
==========================================================
Свойство: z-index
Управляет наложением друг на друга элементов с
параметрами position:relative,position:absolute,position:fixed по оси Z


______________________________________________Адаптивная верстка____________________________________________________

Условия медиазапросов (@media)

Тип устройства:
all 	Подходит для всех типов устройств.
print 	Предназначен для страничных материалов и документов, просматриваемых на экране в режиме предварительного просмотра печати.
screen 	Предназначен в первую очередь для экранов цветных компьютерных мониторов.
speech 	Предназначен для синтезаторов речи.

Характеристики устройства:
width 	
Проверяет ширину области просмотра. Значения задаются в единицах длины, px, em и т.д., например, (width: 800px). 
Обычно для проверки используются минимальные и максимальные значения ширины.

min-width 
применяет правило если ширина области просмотра больше значения, указанного в запросе, 

max-width — ширина области просмотра меньше значения, указанного в запросе.

height 	
Проверяет высоту области просмотра. Значения задаются в единицах длины, px, em и т.д., например, (height: 500px). 
Обычно для проверки используются минимальные и максимальные значения высоты.

min-height 
применяет правило если высота области просмотра больше значения, указанного в запросе, 
max-height — высота области просмотра которого меньше значения, указанного в запросе.

aspect-ratio 	
Проверяет соотношение ширины к высоте области просмотра. Широкоэкранный дисплей с соотношением сторон 16:9 может быть помечен как (aspect-ratio: 16/9).

min-aspect-ratio 
проверяет минимальное соотношение, max-aspect-ratio — максимальное соотношение ширины к высоте области просмотра.

orientation 	
Проверяет ориентацию области просмотра. Принимает два значения: (orientation: portrait) и (orientation: landscape).

resolution 	
Проверяет разрешение экрана (количество пикселей). Значения также могут проверять количество точек на дюйм (dpi) 
или количество точек на сантиметр (dpcm), например, (resolution: 300dpi).

min-resolution 
проверяет минимальное разрешение экрана, max-resolution — максимальное.

color 	
Проверяет количество бит на каждый из цветовых компонентов устройства вывода. Например, (min-color: 4) означает,
 что экран конкретного устройства должен иметь 4-битную глубину цвета.

min-color 
проверяет минимальное количество бит, max-color — максимальное количество бит.

color-index 	
Проверяет количество записей в таблице подстановки цветов. В качестве значения указывается положительное число, например, (color-index: 256).

min-color-index 
проверяет минимальное количество записей, max-color-index — максимальное количество записей.

monochrome 	
Проверяет количество битов на пиксель монохромного устройства. Значение задается целым положительным числом, например, (min-monochrome: 8).

min-monochrome 
проверяет минимальное количество битов, max-monochrome — максимальное количество битов.

-webkit-device-pixel-ratio 	
Задаёт количество физических пикселей устройства на каждый CSS-пиксель.

БУДУ РАД ПОДДЕРЖКЕ КАНАЛА=========================================================================
https://www.patreon.com/freelancerlifestyle


_______________________________________(CSS transition) ____________________________________________
https://fls.guru/csstransition.html

Универсальное свойство записи 
transition: (transition-property:all) (transition-duration: 100ms) (Transition-timing-function: linear) (transition-delay: 0.5s);
transition: all 100ms linear 0.5s;

https://fls.guru/cssanimation.html
/*  animation-name: white-circle;
    animation-duration: 3s;
    animation-timing-function: linear;
    animation-iteration-count: 1;
    animation-direction: alternate;
    animation-delay: 0s;
    animation-fill-mode: forwards;
*/
Универсальное свойство записи

animation: white-circle 3s linear 1 alternate 0s forwards;

==================================================================================================
https://fls.guru/transform.html
	
____________________________________Flex________________________________________________
https://fls.guru/flexbox.html
==================================
flex: 1 1 0; - Поделить блок на равные айтемы 

_______________________________Форматы изображений в веб-разработке и виды графики _______________________________________

Иконоки - 		Векторный формат! SVG
Фоновые изображения - 	Растровый формат! PNG (поддерживает прозрачность)
Контентные изображения - Растровый формат! JPEG
____________________________________________________________________________________
____________________________________________________________________________________
____________________________________________________________________________________
____________________________________________________________________________________
____________________________________________________________________________________
____________________________________________________________________________________

____________________________________________________________________________________
Иконки для сайтов https://fontawesome.com/

______________________________________________Grid_______________________________________________

https://fls.guru/grid.html
https://morphismail.github.io/css-grid-manual/

/* Для сборщиков нужно вкл. поддержку автопрефексора для Grid */

---------------------
Обьявление Grid контейнера

display: grid;
display: inline-grid
----------------------
Определение сетки

grid-template-rows: repeat(2, 1fr); /* 2 одинаковых ряда */ 
grid-template-columns: 1fr minmax(200px, 1fr) auto; /*3 колонки*/ 

или универсальная запись 

grid-template: repeat(2, 1fr) / 1fr minmax(200px, 1fr) auto;/* ряды/колонки */
----------------------

---
auto - колонка подстраивается под контент
fit-content(200px) - ограничивает контент в колонке
----------------------
Имена областей 

.grid-names {
    display: grid;
    grid-template: repeat(2, 1fr) / 150px 1fr;
    grid-template-areas:
        "block_1 block_1" /* занимает обе колонки */
        "block_2 block_3"; /* блок2 занимает первую колонку, блок3 вторую */
}

или универсальная запись

.grid-names {
    display: grid;
    /* grid-template: repeat(2, 1fr) / 150px 1fr; */
    grid-template:
        [start] "block_1 block_1" 1fr [row2]
        [row2] "block_2 block_3" 1fr [row-end]/ 150px 1fr;
}

.block_1 {
    grid-area: block_1;
}
.block_2 {
    grid-area: block_2;
}
.block_3 {
    grid-area: block_3;
}
----------------------
Неявная сетка

grid-auto-rows: 300px ;
grid-auto-columns: 300px ;
grid-auto-flow: dense;
------------------------------размещение элементов с помощью линий сетки------
.grid__item:nth-child(1) {
    grid-row-start: 1; /* от первой горизотнальной линии */
    grid-row-end: 3; /* до третей горизотнальной линии*/

    grid-column-start: 1; /*от первой вертикальной линии*/
    grid-column-end: 3; /*до третей вертикальной линии*/
}
---

.grid__item:nth-child(1) {
    grid-row-start: span 2; /* охватывает две ячейки строки*/
    grid-column-start: span 1; /* охватывает одну ячейку колонки*/
}
----------------------
Именование линий сетки

.grid {
    display: grid;

    grid-template-rows: [start] auto [row2] 200px [row-end];
    grid-template-columns: [start] 1fr [col2] 1fr [col3] 1fr [col-end];
}

.grid__item:nth-child(1) {
    grid-row-start: row2; /* стартуес со второй горизонтальной линии и тамже заканчивается*/

    grid-column-start: col2; /* стартует со второй вертикальной линии и*/
    grid-column-end: col-end; /* заканчивается на последней вертикальной линии */

    или

    grid-row: 2; /* стартуес со второй горизонтальной линии и тамже заканчивается*/
    grid-column: col2/col-end; /* стартует со второй вертикальной линии и заканчивается на последней вертикальной линии*/
}
-------------------------
Изменение порядка эллементов

order: 1;
-------------------------
Выравнивание эллементов
rs- row start; re -row end;
cs- column start; ce - column end;

grid-row: rs/re;
grid-column: cs/ce;
grid-area: rs/cs/re/ce

.grid {
    display: grid;

    grid-template-rows: [start] 200px [row2] 200px [row-end];
    grid-template-columns: [start] 1fr [col2] 1fr [col3] 1fr [col-end];

    justify-items: start; /*stretch by default*/
    align-items: end; /*stretch by default*/
}

.grid__item:nth-child(1) { /* выравнивание отдельного эллемента*/
    justify-self: stretch;
    align-self: start;
}
-------------------------
Зазоры между строками и колонками gap

.grid {
    display: grid;

    grid-template-rows: [start] 200px [row2] 200px [row-end];
    grid-template-columns: [start] 1fr [col2] 1fr [col3] 1fr [col-end];

    row-gap: 10px;
    column-gap: 39px;

	или 

    gap: 10px 39px;
}
-------------------------



_______________________________________Препроцессор SASS/SCSS____________________________________________

Вложенность
--------------
HTML

<div class="block">Hello i am <span>Superman</span> </div>
--------------
SCSS:

.block {
    font-size: 14px;
    line-height: 20px;

    span {
        color: red;
    }
}
---------------
CSS:

.block {
	font-size: 14px;
	line-height: 20px;
}

.block span {
	color: red;
}

===============
HTML/

<div class="block">
    <p>Paragraph one</p>
    <div class="block__text">
        <p>Paragraph two</p>
        <p>Hello <span>I</span> am <span>Superman</span> !</p>
    </div>
</div>
---------------
SCSS

.block {
    font-size: 14px;
    line-height: 20px;

    span {
        color: red; /*I*/
    }

    > p {
        color: yellow;
        /* Paragraph one */
    }

    .block__text {
        font-size: 25px;
        span:last-child {
            color: green; /*!*/
        }
    }
}
---------------
CSS

.block {
	font-size: 14px;
	line-height: 20px;
}

.block span {
	color: red;
}

.block > p {
	color: yellow;
	/* Paragraph one */
}

.block .block__text {
	font-size: 25px;
}

.block .block__text span:last-child {
	color: green;
}
==========================================================================================
& - ссылка на родителя
--------------
<div class="block">
    <a href="" class="link">Google</a>
    <div class="block__text">
        <p>Hello <span>I</span> am <span>Superman</span> !</p>
    </div>
</div>
--------------
SCSS

.link {
    color: blue;
    text-decoration: underline;
    &:hover {
        color: green;
    }
}
--------------
CSS

.link {
	color: blue;
	text-decoration: underline;
}

.link:hover {
	color: green;
}
==================
Два класса у блока (+класс модификатор block--big)

<div class="block block--big">
    <div class="block__text">
        <p>Hello <span>I</span> am <span>Superman</span> !</p>
    </div>
</div>
----------------
SCSS

.block {
    &.block--big {
        font-size: 35px;
    }
}
----------------
CSS

.block.block--big {
	font-size: 35px;
}
=================
Обратится к Inner Link внутри класса .block
<div class="block">
    <div class="block__text">
        <a class="link" href="">Inner Link</a>
    </div>
</div>
<a class="link" href="">Outer Link</a>
----------------
SCSS

.block {
    font-size: 14px;
}

.link {
    color: blue;
    text-decoration: none;

    .block & { 
        color: green;
    }
}
----------------
CSS

.block {
	font-size: 14px;
}

.link {
	color: blue;
	text-decoration: none;
}

.block .link {
	color: green;
}
==========================================================================================
Переменные
---------------
SCSS

$fz: 100px;
$color_1: red;

.block {
    font-size: $fz;
    color: $color_1;
}
---------------
CSS

.block {
	font-size: 100px;
	color: red;
}
==========================================================================================
Импорт
Указываем путь до файла
@import "../nullstyleTest/nullstyle.scss";
==========================================================================================
Шаблоны
---------------
HTML

<div class="block">
    <a class="link" href="">Inner Link</a>
</div>
<a class="link" href="">Outer Link</a>
---------------
Создание

%tplBorder {
    border: 4px dotted blue; 
}
--------------
Подключение

.link {
    color: $color_2;

    .block & {
        @extend %tplBorder; /*Inner Link*/
        color: red; /*можно перезаписать общее для класс link свойство*/
    }
}
==========================================================================================
Миксины
---------------
HTML

<div class="block">
    <a class="link" href="">Inner Link</a>
</div>
<a class="link" href="">Outer Link</a>
---------------
Создание

@mixin fontStyle($fz, $c) {
    font-size: $fz;
    color: $c;
    text-transform: uppercase;
}
--------------
Подключение

.link {
    color: green;
    .block & {
        @include fontStyle(50px, red);
    }
}
--------------
CSS

.link {
	color: green;
}

.block .link {
	font-size: 50px;
	color: red;
	text-transform: uppercase;
}
==========================================================================================
Математические операции
----------------
SCSS

.block {
    width: 300/900 * 100%;
}
----------------
CSS

.block {
	width: 33.3333333333%;
}


==============================================Photoshop=============================================
Ctrl + R - вкл/откл линейки
Ctrl + Н - вкл направляющие (при зажатом Ctrl нажав на обьект ЛКМ можно смотреть расстояние до других обьектов)
F - макет на весь экран
Alt - приблизить отдолить при лупе

